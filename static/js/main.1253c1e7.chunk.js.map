{"version":3,"sources":["features/Users/users-reducer.ts","api/social-network-api.ts","app/store.ts","app/App.tsx","index.tsx"],"names":["usersInitialState","axios","create","baseURL","withCredentials","headers","users","totalUsersCount","error","rootReducer","combineReducers","state","action","type","totalCount","store","createStore","applyMiddleware","thunk","window","App","ReactDOM","render","document","getElementById"],"mappings":"4RAGaA,G,OCCWC,EAAMC,OAAO,CACjCC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAQ,CACJ,UAAW,0CDL4C,CAC3DC,MAAO,GACPC,gBAAiB,KACjBC,MAAO,OEFLC,EAAcC,YAAgB,CAChCJ,MFKwB,WACS,IADRK,EACO,uDADCX,EAAmBY,EACpB,uCAChC,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,2BAAIF,GAAX,IACIL,MAAOM,EAAON,MACdC,gBAAiBK,EAAOE,WACxBN,MAAOI,EAAOJ,QAEtB,QACI,OAAOG,MEXNI,EAAQC,YAAYP,EAAaQ,YAAgBC,MAS9DC,OAAOJ,MAAQA,ECfR,IAAMK,EAAM,WAEf,OACI,+BCCRC,IAASC,OACH,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAERQ,SAASC,eAAe,W","file":"static/js/main.1253c1e7.chunk.js","sourcesContent":["import {AppThunkType} from \"../../app/store\";\r\nimport {usersApi} from \"../../api/social-network-api\";\r\n\r\nexport const usersInitialState: UsersReducerInitialStateType = {\r\n    users: [],\r\n    totalUsersCount: null,\r\n    error: null\r\n\r\n}\r\n\r\nexport const usersReducer = (state = usersInitialState, action: UsersReducerActionType):\r\n    UsersReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USERS\":\r\n            return {...state,\r\n                users: action.users,\r\n                totalUsersCount: action.totalCount,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n/* Actions */\r\nexport const setUsersAC = (users: UserType[], totalCount: number, error: string | null) => ({\r\n    type: \"SET_USERS\",\r\n    users,\r\n    totalCount,\r\n    error\r\n} as const)\r\n\r\n/* Thunks */\r\nexport const setUsersTC = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const res = await usersApi.getUsers()\r\n        dispatch(setUsersAC(res.data.items, res.data.totalCount, res.data.error))\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\n/* Types */\r\nexport type UsersReducerInitialStateType = {\r\n    users: UserType[]\r\n    totalUsersCount: number | null\r\n    error: string | null\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    name: number\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersReducerActionType =\r\n    ReturnType<typeof setUsersAC>\r\n\r\n","import axios from 'axios'\r\nimport {UserType} from \"../features/Users/users-reducer\";\r\n\r\n/* Instance with query settings */\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers:{\r\n        'API-key': 'c3ff16a4-4b9d-490a-b188-2440deac59e8'\r\n    }\r\n});\r\n\r\n/* Objects with requests to the server */\r\nexport const authApi = {\r\n    me(){\r\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(requestParams: LoginRequestType){\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, requestParams)\r\n    },\r\n    logout(){\r\n      return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n};\r\n\r\nexport const followingApi = {\r\n    follow(userId: number){\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number){\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n    },\r\n    followingUsers(userId: number){\r\n        return instance.get<ResponseType>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 50){\r\n        return instance.get<UsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    }\r\n}\r\n\r\n\r\n/* Types */\r\nexport type UsersResponseType = {\r\n    items:UserType[]\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {usersReducer, UsersReducerActionType} from \"../features/Users/users-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType = UsersReducerActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\n\n\nexport const App = () => {\n\n    return (\n        <div>\n\n        </div>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport {store} from \"./app/store\";\nimport {App} from \"./app/App\";\n\nReactDOM.render(\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\n//If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}
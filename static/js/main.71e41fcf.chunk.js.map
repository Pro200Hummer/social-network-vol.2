{"version":3,"sources":["api/social-network-api.ts","features/Users/users-reducer.ts","app/store.ts","features/Users/Users.tsx","features/Users/UsersContainer.tsx","app/App.tsx","app/AppContainer.tsx","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","followingApi","userId","post","delete","usersApi","currentPage","pageSize","get","usersReducerInitialState","items","totalCount","followingProgress","error","toggleFollowing","isFollowing","userID","type","rootReducer","combineReducers","users","state","action","map","u","id","followed","filter","store","createStore","applyMiddleware","thunk","window","Users","React","memo","props","pages","changePageNumber","changeFollowingStatus","Container","maxWidth","Pagination","count","color","onChange","e","page","button","Button","variant","size","data-following","disabled","some","onClick","currentTarget","dataset","following","Box","component","key","Grid","container","spacing","item","Avatar","src","photos","small","xs","sm","direction","name","status","UsersContainer","useSelector","dispatch","useDispatch","useEffect","then","res","data","Math","ceil","useCallback","trigger","resultCode","unfollow","followTC","follow","unfollowTC","App","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71e41fcf.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {UserType} from \"../features/Users/users-reducer\";\r\n\r\n/* Instance with query settings */\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers:{\r\n        'API-key': 'c3ff16a4-4b9d-490a-b188-2440deac59e8'\r\n    }\r\n});\r\n\r\n/* Objects with requests to the server */\r\nexport const authApi = {\r\n    me(){\r\n        return instance.get<ResponseType<MeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(requestParams: LoginRequestType){\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, requestParams)\r\n    },\r\n    logout(){\r\n      return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n};\r\n\r\nexport const followingApi = {\r\n    follow(userId: number){\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number){\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n    },\r\n    followingUsers(userId: number){\r\n        return instance.get<ResponseType>(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 50){\r\n        return instance.get<UsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    }\r\n}\r\n\r\n\r\n/* Types */\r\nexport type UsersResponseType = {\r\n    items:UserType[]\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\n","import {AppThunkType} from \"../../app/store\";\r\nimport {followingApi, usersApi} from \"../../api/social-network-api\";\r\n\r\nexport const usersReducerInitialState: UsersReducerInitialStateType = {\r\n    items: [],\r\n    totalCount: 0,\r\n    pageSize: 100,\r\n    currentPage: 1,\r\n    followingProgress: [],\r\n    error: null\r\n\r\n}\r\n\r\nexport const usersReducer =\r\n    (state = usersReducerInitialState, action: UsersReducerActionTypes) => {\r\n    switch (action.type) {\r\n        case \"USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                items: action.users,\r\n                totalCount: action.totalCount,\r\n                error: action.error\r\n            }\r\n        case \"USERS/CHANGE_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"USERS/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => {\r\n                    if(u.id === action.userID){\r\n                        return {...u, followed: !u.followed}\r\n                    }else{\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case \"USERS/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(u => {\r\n                    if(u.id === action.userID){\r\n                        return {...u, followed: !u.followed}\r\n                    }else{\r\n                        return u\r\n                    }\r\n                })\r\n            }\r\n        case \"USERS/TOGGLE_FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isFollowing ?\r\n                    [...state.followingProgress, action.userID ]:\r\n                    state.followingProgress.filter(id => id !== action.userID)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n/* Action creators */\r\nexport const getUsers = (users: UserType[], totalCount: number, error: string | null) => ({\r\n    type: \"USERS/SET_USERS\",\r\n    users,\r\n    totalCount,\r\n    error\r\n} as const)\r\nexport const changeCurrentPage = (currentPage: number) => ({type: \"USERS/CHANGE_CURRENT_PAGE\", currentPage} as const)\r\nexport const follow = (userID: number) => ({type: \"USERS/FOLLOW\", userID} as const)\r\nexport const unfollow = (userID: number) => ({type: \"USERS/UNFOLLOW\", userID} as const)\r\nexport const toggleFollowing = (isFollowing: boolean, userID: number) =>\r\n    ({type: \"USERS/TOGGLE_FOLLOWING\",isFollowing, userID} as const)\r\n\r\n/* Thunk */\r\nexport const getUsersTC = (currentPage: number, pageSize: number):AppThunkType => dispatch => {\r\n    usersApi.getUsers(currentPage, pageSize)\r\n        .then(res => {\r\n            dispatch(getUsers(res.data.items, res.data.totalCount, res.data.error))\r\n        })\r\n}\r\n\r\nexport const followTC = (userID: number):AppThunkType => dispatch => {\r\n    dispatch(toggleFollowing(true, userID))\r\n    followingApi.unfollow(userID)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(unfollow(userID))\r\n            }\r\n            dispatch(toggleFollowing(false, userID))\r\n        })\r\n}\r\n\r\nexport const unfollowTC = (userID: number):AppThunkType => dispatch => {\r\n    dispatch(toggleFollowing(true, userID))\r\n    followingApi.follow(userID)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(follow(userID))\r\n            }\r\n            dispatch(toggleFollowing(false, userID))\r\n        })\r\n}\r\n\r\n/* Types */\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersReducerInitialStateType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    followingProgress: number[]\r\n    error: string | null\r\n}\r\n\r\nexport type UsersReducerActionTypes =\r\n    | ReturnType<typeof getUsers>\r\n    | ReturnType<typeof changeCurrentPage>\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof toggleFollowing>\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {usersReducer, UsersReducerActionTypes} from \"../features/Users/users-reducer\";\r\nimport {AppReducerActionsType} from \"./reducers/app-reducer\";\r\nimport {AuthReducerActionsType} from \"./reducers/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | UsersReducerActionTypes\r\n    | AppReducerActionsType\r\n    | AuthReducerActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react'\r\nimport {Container} from \"@material-ui/core\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {UsersReducerInitialStateType} from \"./users-reducer\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: UsersReducerInitialStateType\r\n    pages: number\r\n    changePageNumber: (page: number) => void\r\n    changeFollowingStatus: (trigger: string | undefined, userID: number) => void\r\n\r\n}\r\n\r\nexport const Users: React.FC<UsersPropsType> = React.memo((props) => {\r\n    const{\r\n        users,\r\n        pages,\r\n        changePageNumber,\r\n        changeFollowingStatus\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Container maxWidth=\"sm\">\r\n                <Pagination\r\n                    count={ pages }\r\n                    color=\"primary\"\r\n                    onChange={ (e, page) => changePageNumber(page) }\r\n                />\r\n                { users.items.map(u => {\r\n                    const button = u.followed ?\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            data-following=\"unfollow\"\r\n                            disabled={users.followingProgress.some(id => id === u.id)}\r\n                            onClick={e => changeFollowingStatus(e.currentTarget.dataset.following, u.id)}\r\n                        >\r\n                            Unfollow\r\n                        </Button> :\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            data-following=\"follow\"\r\n                            disabled={users.followingProgress.some(id => id === u.id)}\r\n                            onClick={e => changeFollowingStatus(e.currentTarget.dataset.following, u.id)}\r\n                        >\r\n                            Follow\r\n                        </Button>\r\n\r\n                    return <Box component=\"div\" key={ u.id }>\r\n                        <Grid container spacing={ 2 }>\r\n                            <Grid item>\r\n                                <Avatar src={ u.photos.small }/>\r\n                            </Grid>\r\n                            <Grid item xs={ 12 } sm container>\r\n                                <Grid item xs direction=\"column\" spacing={ 3 }>\r\n                                    <Grid item xs>\r\n                                        { u.name }\r\n                                    </Grid>\r\n                                    <Grid item xs>\r\n                                        { u.status }\r\n                                    </Grid>\r\n                                    <Grid item xs>\r\n                                        { button }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                }) }\r\n            </Container>\r\n        </>\r\n    )\r\n});","import React, {useCallback, useEffect} from 'react'\r\nimport {Users} from \"./Users\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeCurrentPage, followTC, getUsersTC, unfollowTC, UsersReducerInitialStateType} from \"./users-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nexport const UsersContainer: React.FC = React.memo(() => {\r\n\r\n    const users = useSelector<AppRootStateType, UsersReducerInitialStateType>(state => state.users)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(users.currentPage, users.pageSize))\r\n    }, [users.currentPage])\r\n\r\n    const pages = Math.ceil(users.totalCount / users.pageSize)\r\n\r\n    const changePageNumber = useCallback((page: number) => {\r\n        dispatch(changeCurrentPage(page))\r\n    }, [dispatch])\r\n\r\n    const changeFollowingStatus = useCallback((trigger: string | undefined, userID: number) => {\r\n        if(trigger === \"unfollow\"){\r\n            dispatch(followTC(userID))\r\n        }else if(trigger === \"follow\"){\r\n            dispatch(unfollowTC(userID))\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Users\r\n                users={users}\r\n                pages={pages}\r\n                changePageNumber={changePageNumber}\r\n                changeFollowingStatus={changeFollowingStatus}\r\n            />\r\n        </>\r\n    )\r\n});","import React from 'react';\nimport {UsersContainer} from \"../features/Users/UsersContainer\";\n\n\nexport const App = () => {\n\n    return (\n        <>\n            <UsersContainer/>\n        </>\n    )\n}\n\n","import React from 'react'\r\nimport {App} from \"./App\";\r\n\r\nexport const AppContainer = () => {\r\n    return (\r\n        <>\r\n            <App/>\r\n        </>\r\n    )\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport {store} from \"./app/store\";\nimport {AppContainer} from \"./app/AppContainer\";\n\nReactDOM.render(\n      <Provider store={store}>\n          <AppContainer />\n      </Provider>,\n  document.getElementById('root')\n);\n\n//If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}